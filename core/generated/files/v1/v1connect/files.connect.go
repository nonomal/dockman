// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: files/v1/files.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/files/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "files.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceCreateProcedure is the fully-qualified name of the FileService's Create RPC.
	FileServiceCreateProcedure = "/files.v1.FileService/Create"
	// FileServiceListProcedure is the fully-qualified name of the FileService's List RPC.
	FileServiceListProcedure = "/files.v1.FileService/List"
	// FileServiceDeleteProcedure is the fully-qualified name of the FileService's Delete RPC.
	FileServiceDeleteProcedure = "/files.v1.FileService/Delete"
	// FileServiceExistsProcedure is the fully-qualified name of the FileService's Exists RPC.
	FileServiceExistsProcedure = "/files.v1.FileService/Exists"
	// FileServiceRenameProcedure is the fully-qualified name of the FileService's Rename RPC.
	FileServiceRenameProcedure = "/files.v1.FileService/Rename"
	// FileServiceGetDockmanYamlProcedure is the fully-qualified name of the FileService's
	// GetDockmanYaml RPC.
	FileServiceGetDockmanYamlProcedure = "/files.v1.FileService/GetDockmanYaml"
	// FileServiceFormatProcedure is the fully-qualified name of the FileService's Format RPC.
	FileServiceFormatProcedure = "/files.v1.FileService/Format"
)

// FileServiceClient is a client for the files.v1.FileService service.
type FileServiceClient interface {
	// root file management
	Create(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Exists(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error)
	GetDockmanYaml(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.DockmanYaml], error)
	Format(context.Context, *connect.Request[v1.FormatRequest]) (*connect.Response[v1.FormatResponse], error)
}

// NewFileServiceClient constructs a client for the files.v1.FileService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		create: connect.NewClient[v1.File, v1.Empty](
			httpClient,
			baseURL+FileServiceCreateProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.Empty, v1.ListResponse](
			httpClient,
			baseURL+FileServiceListProcedure,
			connect.WithSchema(fileServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.File, v1.Empty](
			httpClient,
			baseURL+FileServiceDeleteProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		exists: connect.NewClient[v1.File, v1.Empty](
			httpClient,
			baseURL+FileServiceExistsProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Exists")),
			connect.WithClientOptions(opts...),
		),
		rename: connect.NewClient[v1.RenameFile, v1.Empty](
			httpClient,
			baseURL+FileServiceRenameProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Rename")),
			connect.WithClientOptions(opts...),
		),
		getDockmanYaml: connect.NewClient[v1.Empty, v1.DockmanYaml](
			httpClient,
			baseURL+FileServiceGetDockmanYamlProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetDockmanYaml")),
			connect.WithClientOptions(opts...),
		),
		format: connect.NewClient[v1.FormatRequest, v1.FormatResponse](
			httpClient,
			baseURL+FileServiceFormatProcedure,
			connect.WithSchema(fileServiceMethods.ByName("Format")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	create         *connect.Client[v1.File, v1.Empty]
	list           *connect.Client[v1.Empty, v1.ListResponse]
	delete         *connect.Client[v1.File, v1.Empty]
	exists         *connect.Client[v1.File, v1.Empty]
	rename         *connect.Client[v1.RenameFile, v1.Empty]
	getDockmanYaml *connect.Client[v1.Empty, v1.DockmanYaml]
	format         *connect.Client[v1.FormatRequest, v1.FormatResponse]
}

// Create calls files.v1.FileService.Create.
func (c *fileServiceClient) Create(ctx context.Context, req *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls files.v1.FileService.List.
func (c *fileServiceClient) List(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls files.v1.FileService.Delete.
func (c *fileServiceClient) Delete(ctx context.Context, req *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// Exists calls files.v1.FileService.Exists.
func (c *fileServiceClient) Exists(ctx context.Context, req *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return c.exists.CallUnary(ctx, req)
}

// Rename calls files.v1.FileService.Rename.
func (c *fileServiceClient) Rename(ctx context.Context, req *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error) {
	return c.rename.CallUnary(ctx, req)
}

// GetDockmanYaml calls files.v1.FileService.GetDockmanYaml.
func (c *fileServiceClient) GetDockmanYaml(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.DockmanYaml], error) {
	return c.getDockmanYaml.CallUnary(ctx, req)
}

// Format calls files.v1.FileService.Format.
func (c *fileServiceClient) Format(ctx context.Context, req *connect.Request[v1.FormatRequest]) (*connect.Response[v1.FormatResponse], error) {
	return c.format.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the files.v1.FileService service.
type FileServiceHandler interface {
	// root file management
	Create(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Exists(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error)
	GetDockmanYaml(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.DockmanYaml], error)
	Format(context.Context, *connect.Request[v1.FormatRequest]) (*connect.Response[v1.FormatResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	fileServiceCreateHandler := connect.NewUnaryHandler(
		FileServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(fileServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceListHandler := connect.NewUnaryHandler(
		FileServiceListProcedure,
		svc.List,
		connect.WithSchema(fileServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDeleteHandler := connect.NewUnaryHandler(
		FileServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(fileServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceExistsHandler := connect.NewUnaryHandler(
		FileServiceExistsProcedure,
		svc.Exists,
		connect.WithSchema(fileServiceMethods.ByName("Exists")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceRenameHandler := connect.NewUnaryHandler(
		FileServiceRenameProcedure,
		svc.Rename,
		connect.WithSchema(fileServiceMethods.ByName("Rename")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetDockmanYamlHandler := connect.NewUnaryHandler(
		FileServiceGetDockmanYamlProcedure,
		svc.GetDockmanYaml,
		connect.WithSchema(fileServiceMethods.ByName("GetDockmanYaml")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceFormatHandler := connect.NewUnaryHandler(
		FileServiceFormatProcedure,
		svc.Format,
		connect.WithSchema(fileServiceMethods.ByName("Format")),
		connect.WithHandlerOptions(opts...),
	)
	return "/files.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceCreateProcedure:
			fileServiceCreateHandler.ServeHTTP(w, r)
		case FileServiceListProcedure:
			fileServiceListHandler.ServeHTTP(w, r)
		case FileServiceDeleteProcedure:
			fileServiceDeleteHandler.ServeHTTP(w, r)
		case FileServiceExistsProcedure:
			fileServiceExistsHandler.ServeHTTP(w, r)
		case FileServiceRenameProcedure:
			fileServiceRenameHandler.ServeHTTP(w, r)
		case FileServiceGetDockmanYamlProcedure:
			fileServiceGetDockmanYamlHandler.ServeHTTP(w, r)
		case FileServiceFormatProcedure:
			fileServiceFormatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) Create(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.Create is not implemented"))
}

func (UnimplementedFileServiceHandler) List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.List is not implemented"))
}

func (UnimplementedFileServiceHandler) Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.Delete is not implemented"))
}

func (UnimplementedFileServiceHandler) Exists(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.Exists is not implemented"))
}

func (UnimplementedFileServiceHandler) Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.Rename is not implemented"))
}

func (UnimplementedFileServiceHandler) GetDockmanYaml(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.DockmanYaml], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.GetDockmanYaml is not implemented"))
}

func (UnimplementedFileServiceHandler) Format(context.Context, *connect.Request[v1.FormatRequest]) (*connect.Response[v1.FormatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.Format is not implemented"))
}
