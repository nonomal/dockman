// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: git/v1/git.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBranchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	mi := &file_git_v1_git_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{0}
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Branches      []string               `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	mi := &file_git_v1_git_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{1}
}

func (x *ListBranchesResponse) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

type BranchListFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Branch        string                 `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchListFileRequest) Reset() {
	*x = BranchListFileRequest{}
	mi := &file_git_v1_git_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchListFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchListFileRequest) ProtoMessage() {}

func (x *BranchListFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchListFileRequest.ProtoReflect.Descriptor instead.
func (*BranchListFileRequest) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{2}
}

func (x *BranchListFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type BranchListFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []string               `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchListFileResponse) Reset() {
	*x = BranchListFileResponse{}
	mi := &file_git_v1_git_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchListFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchListFileResponse) ProtoMessage() {}

func (x *BranchListFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchListFileResponse.ProtoReflect.Descriptor instead.
func (*BranchListFileResponse) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{3}
}

func (x *BranchListFileResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type FileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Branch        string                 `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Filepath      []string               `protobuf:"bytes,2,rep,name=filepath,proto3" json:"filepath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_git_v1_git_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{4}
}

func (x *FileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *FileRequest) GetFilepath() []string {
	if x != nil {
		return x.Filepath
	}
	return nil
}

type CommitQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          *File                  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitQuery) Reset() {
	*x = CommitQuery{}
	mi := &file_git_v1_git_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitQuery) ProtoMessage() {}

func (x *CommitQuery) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitQuery.ProtoReflect.Descriptor instead.
func (*CommitQuery) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{5}
}

func (x *CommitQuery) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *CommitQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommitList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commits       []*Commit              `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitList) Reset() {
	*x = CommitList{}
	mi := &file_git_v1_git_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitList) ProtoMessage() {}

func (x *CommitList) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitList.ProtoReflect.Descriptor instead.
func (*CommitList) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{6}
}

func (x *CommitList) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Author        string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	When          string                 `protobuf:"bytes,5,opt,name=when,proto3" json:"when,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_git_v1_git_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{7}
}

func (x *Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Commit) GetWhen() string {
	if x != nil {
		return x.When
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_git_v1_git_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{8}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_git_v1_git_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_git_v1_git_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_git_v1_git_proto_rawDescGZIP(), []int{9}
}

var File_git_v1_git_proto protoreflect.FileDescriptor

const file_git_v1_git_proto_rawDesc = "" +
	"\n" +
	"\x10git/v1/git.proto\x12\x06git.v1\"\x15\n" +
	"\x13ListBranchesRequest\"2\n" +
	"\x14ListBranchesResponse\x12\x1a\n" +
	"\bbranches\x18\x01 \x03(\tR\bbranches\"/\n" +
	"\x15BranchListFileRequest\x12\x16\n" +
	"\x06branch\x18\x01 \x01(\tR\x06branch\".\n" +
	"\x16BranchListFileResponse\x12\x14\n" +
	"\x05files\x18\x01 \x03(\tR\x05files\"A\n" +
	"\vFileRequest\x12\x16\n" +
	"\x06branch\x18\x01 \x01(\tR\x06branch\x12\x1a\n" +
	"\bfilepath\x18\x02 \x03(\tR\bfilepath\"I\n" +
	"\vCommitQuery\x12 \n" +
	"\x04file\x18\x01 \x01(\v2\f.git.v1.FileR\x04file\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"6\n" +
	"\n" +
	"CommitList\x12(\n" +
	"\acommits\x18\x01 \x03(\v2\x0e.git.v1.CommitR\acommits\"x\n" +
	"\x06Commit\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x16\n" +
	"\x06author\x18\x02 \x01(\tR\x06author\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12\x12\n" +
	"\x04when\x18\x05 \x01(\tR\x04when\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\"\x1a\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\a\n" +
	"\x05Empty2\xc5\x02\n" +
	"\n" +
	"GitService\x121\n" +
	"\vListCommits\x12\f.git.v1.File\x1a\x12.git.v1.CommitList\"\x00\x12.\n" +
	"\x06Commit\x12\x13.git.v1.CommitQuery\x1a\r.git.v1.Empty\"\x00\x120\n" +
	"\bSyncFile\x12\x13.git.v1.FileRequest\x1a\r.git.v1.Empty\"\x00\x12U\n" +
	"\x12ListFileFromBranch\x12\x1d.git.v1.BranchListFileRequest\x1a\x1e.git.v1.BranchListFileResponse\"\x00\x12K\n" +
	"\fListBranches\x12\x1b.git.v1.ListBranchesRequest\x1a\x1c.git.v1.ListBranchesResponse\"\x00Bz\n" +
	"\n" +
	"com.git.v1B\bGitProtoP\x01Z)github.com/RA341/dockman/generated/git/v1\xa2\x02\x03GXX\xaa\x02\x06Git.V1\xca\x02\x06Git\\V1\xe2\x02\x12Git\\V1\\GPBMetadata\xea\x02\aGit::V1b\x06proto3"

var (
	file_git_v1_git_proto_rawDescOnce sync.Once
	file_git_v1_git_proto_rawDescData []byte
)

func file_git_v1_git_proto_rawDescGZIP() []byte {
	file_git_v1_git_proto_rawDescOnce.Do(func() {
		file_git_v1_git_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_git_v1_git_proto_rawDesc), len(file_git_v1_git_proto_rawDesc)))
	})
	return file_git_v1_git_proto_rawDescData
}

var file_git_v1_git_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_git_v1_git_proto_goTypes = []any{
	(*ListBranchesRequest)(nil),    // 0: git.v1.ListBranchesRequest
	(*ListBranchesResponse)(nil),   // 1: git.v1.ListBranchesResponse
	(*BranchListFileRequest)(nil),  // 2: git.v1.BranchListFileRequest
	(*BranchListFileResponse)(nil), // 3: git.v1.BranchListFileResponse
	(*FileRequest)(nil),            // 4: git.v1.FileRequest
	(*CommitQuery)(nil),            // 5: git.v1.CommitQuery
	(*CommitList)(nil),             // 6: git.v1.CommitList
	(*Commit)(nil),                 // 7: git.v1.Commit
	(*File)(nil),                   // 8: git.v1.File
	(*Empty)(nil),                  // 9: git.v1.Empty
}
var file_git_v1_git_proto_depIdxs = []int32{
	8, // 0: git.v1.CommitQuery.file:type_name -> git.v1.File
	7, // 1: git.v1.CommitList.commits:type_name -> git.v1.Commit
	8, // 2: git.v1.GitService.ListCommits:input_type -> git.v1.File
	5, // 3: git.v1.GitService.Commit:input_type -> git.v1.CommitQuery
	4, // 4: git.v1.GitService.SyncFile:input_type -> git.v1.FileRequest
	2, // 5: git.v1.GitService.ListFileFromBranch:input_type -> git.v1.BranchListFileRequest
	0, // 6: git.v1.GitService.ListBranches:input_type -> git.v1.ListBranchesRequest
	6, // 7: git.v1.GitService.ListCommits:output_type -> git.v1.CommitList
	9, // 8: git.v1.GitService.Commit:output_type -> git.v1.Empty
	9, // 9: git.v1.GitService.SyncFile:output_type -> git.v1.Empty
	3, // 10: git.v1.GitService.ListFileFromBranch:output_type -> git.v1.BranchListFileResponse
	1, // 11: git.v1.GitService.ListBranches:output_type -> git.v1.ListBranchesResponse
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_git_v1_git_proto_init() }
func file_git_v1_git_proto_init() {
	if File_git_v1_git_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_git_v1_git_proto_rawDesc), len(file_git_v1_git_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_git_v1_git_proto_goTypes,
		DependencyIndexes: file_git_v1_git_proto_depIdxs,
		MessageInfos:      file_git_v1_git_proto_msgTypes,
	}.Build()
	File_git_v1_git_proto = out.File
	file_git_v1_git_proto_goTypes = nil
	file_git_v1_git_proto_depIdxs = nil
}
