version: '3'

vars:
  CORE_DIR: core/
  UI_DIR: ui/
  DOCKMAN_IMAGE_BASE: dockman
  # Directory for Go source commands
  GO_CMD_DIR: cmd
  # Directory for build output
  BUILD_DIR: build

tasks:
  default:
    desc: "Lists all available tasks"
    cmds:
      - task --list --sort=alphanumeric

  lint:
    desc: Lint project
    dir: core
    cmds:
      - golangci-lint run ./...

  site:
    desc: Start dev website
    dir: website
    cmds:
      - npm run start

  dock:
    desc: start a a temp dockman on latest tag for testing
    cmds:
      - task: dock:latest

  dock:*:
    desc: start a a temp dockman instance for testing
    env:
      ttg: "{{index .MATCH 0}}"
    cmds:
      - docker run --rm
        -p 8822:8866
        -v /var/run/docker.sock:/var/run/docker.sock
        ghcr.io/ra341/dockman:{{.ttg}}

  init:
    desc: "Setup dockman dev environment should be run only once after cloning the project."
    deps:
      - init:build
      - init:ui
      - tidy

  init:build:
    desc: "Creates the build dir"
    cmd: coreutils mkdir -p {{.BUILD_DIR}}
    status:
      # This command checks if the directory exists. If it does, the task is considered "up-to-date" and won't run.
      - test -d {{.BUILD_DIR}}

  init:ui:
    desc: "calls npm i and builds the ui"
    dir: "{{.UI_DIR}}"
    cmds:
      - task: ui:dep
      - task: ui

  ui:
    desc: "Build the latest web ui in {{.UI_DIR}}"
    dir: "{{.UI_DIR}}"
    #    sources:
    #      - "**/*.tsx"
    cmds:
      - npm run build

  ui:page:*:
    vars:
      NATIVE_DIR: "{{.UI_DIR}}src/pages"
      CMD_NAME: "{{index .MATCH 0}}"
    cmds:
      - coreutils mkdir -p {{ .NATIVE_DIR }}/{{ .CMD_NAME }}
      - coreutils touch {{ .NATIVE_DIR }}/{{ .CMD_NAME }}/{{ .CMD_NAME }}.tsx

  ui:dev:
    desc: "npm run dev in {{.UI_DIR}}"
    dir: "{{.UI_DIR}}"
    cmds:
      - npm run dev

  ui:prev:
    desc: "npm run dev in {{.UI_DIR}}"
    dir: "{{.UI_DIR}}"
    cmds:
      - npm run preview


  ui:dep:
    desc: "calls npm install in {{.UI_DIR}}"
    dir: "{{.UI_DIR}}"
    cmds:
      - npm i

  ui:native:
    dir: "{{.UI_DIR}}"
    vars:
      NATIVE_DIR: ../{{.CORE_DIR}}/{{.GO_CMD_DIR}}/native
    desc: "Builds ui and copies for embed binary. Usage: task ui:native"
    cmds:
      - task: ui
      - coreutils rm -f -r {{.NATIVE_DIR}}/dist
      - coreutils mv -f dist {{.NATIVE_DIR}}/dist

  clean:
    desc: "Removes all files in {{.BUILD_DIR}}"
    cmds:
      - coreutils rm -rf {{.BUILD_DIR}}/*

  tidy:
    desc: "Calls go mod tidy in {{.CORE_DIR}}"
    dir: "{{.CORE_DIR}}"
    cmds:
      - go mod download
      - go mod tidy -v -x

  go:b:*:
    dir: "{{.CORE_DIR}}"
    desc: "Builds a Go target. Usage: task go:<target>"
    vars:
      CMD_NAME: "{{index .MATCH 0}}"
      EXE_EXT: '{{if eq OS "windows"}}.exe{{end}}'
    deps:
      - task: init:build
    sources:
      - "**/*.go"
    generates:
      - "{{.BUILD_DIR}}/{{.CMD_NAME}}{{.EXE_EXT}}"
    cmds:
      - go build -v -o ../{{.BUILD_DIR}}/{{.CMD_NAME}}{{.EXE_EXT}} ./{{.GO_CMD_DIR}}/{{.CMD_NAME}}
    summary: |
      Builds the '{{.CMD_NAME}}' Go command.
      Source: '{{.GO_CMD_DIR}}/{{.CMD_NAME}}'
      Output: '{{.BUILD_DIR}}/{{.CMD_NAME}}{{.EXE_EXT}}'

  go:*:
    dir: "{{.BUILD_DIR}}"
    desc: "Builds and runs a Go target. Usage: task go:r:<target>"
    vars:
      CMD_NAME: "{{index .MATCH 0}}"
      EXE_EXT: '{{if eq OS "windows"}}.exe{{end}}'
      ARGS: '{{if eq .CMD_NAME "updater"}} -cr={{.CMD_NAME}}/compose {{else}} -conf={{.CMD_NAME}}/config -cr={{.CMD_NAME}}/compose{{end}}'
    cmds:
      - task: go:b:{{.CMD_NAME}}
      - ../{{.BUILD_DIR}}/{{.CMD_NAME}}{{.EXE_EXT}}{{.ARGS}}

  go:
    desc: "Builds and runs the default Go target of develop. Usage: task go"
    vars:
      CMD_NAME: "develop"
    cmds:
      - task: go:{{.CMD_NAME}}

  dk:b:*:
    desc: "Builds the main dockman image for a specific target. Usage: task dk:<target>"
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - docker build . -t {{.DOCKMAN_IMAGE_BASE}}:{{.TARGET}} --target {{.TARGET}}
    preconditions:
      - sh: 'test -n "{{.TARGET}}"'
        msg: "The 'target' variable must be provided. Usage: task dk.<target-name>"

  dk:*:
    desc: "Builds and runs the main dockman image for a specific target. Usage: task dk:r:<target>"
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - task dk:b:{{.TARGET}}
      - docker run --rm
        -e DOCKMAN_LOG_LEVEL=debug
        -e DOCKMAN_AUTH_ENABLE=false
        -e DOCKMAN_AUTH_USERNAME=wow
        -e DOCKMAN_AUTH_PASSWORD=wow
        -v /var/run/docker.sock:/var/run/docker.sock
        -p 8221:8866
        {{.DOCKMAN_IMAGE_BASE}}:{{.TARGET}}
    preconditions:
      - sh: 'test -n "{{.TARGET}}"'
        msg: "The 'target' variable must be provided. Usage: task dk:r.<target-name>"

  dk:
    desc: "Builds and runs the main dockman image. Usage: task dk"
    vars:
      TARGET: "alpine"
    cmds:
      - task dk:{{.TARGET}}

  dk:up:
    desc: "Builds the updater image. Usage: task dk:<target>"
    vars:
      UPDATER: "Dockerfile.updater"
      IMAGE: "updater"
      TARGET: "dev"
    cmds:
      - docker build -f {{.UPDATER}} . -t {{.DOCKMAN_IMAGE_BASE}}/{{.IMAGE}}:{{.TARGET}}

  dk:upr:
    desc: "Builds and runs the updater image. Usage: task dk:<target>"
    vars:
      UPDATER: "Dockerfile.updater"
      IMAGE: "updater"
      TARGET: "dev"
    cmds:
      - docker run -p 8869:8869 {{.DOCKMAN_IMAGE_BASE}}/{{.IMAGE}}:{{.TARGET}}

  dk:prune:
    desc: "Prune docker images."
    cmds:
      - docker image prune -f
